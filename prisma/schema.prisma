// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username      String
  avatarUrl String?
  password  String
  passwordResetToken String?
  passwordResetExpires DateTime?
  passwordChangedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  badges UserBadges[] @relation

  @@map("users")

  // relations
  userLogins UserLogins[] @relation("UserLoginDates")
  userJournals Journal[] @relation("UserJournals")
  userGoals Goal[] @relation("UserGoals")
  userTasks Task[] @relation("UserTasks")
  userPomodoroTimers PomodoroTimers[] @relation("UserPomodoroTimers")
  userMeditations Meditations[] @relation("UserMeditations")
}

model UserLogins {
  id        Int      @id @default(autoincrement())
  user    User @relation("UserLoginDates", fields: [userId], references: [id])
  userId   Int
  loginDate DateTime @default(now())

  @@map("user_logins")
}

model Journal {
  id        Int      @id @default(autoincrement())
  user    User @relation("UserJournals", fields: [userId], references: [id])
  userId   Int
  title     String
  mood   String
  moodDescription String
  activity String
  toImprove String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("journals")
}

model Goal {
  id        Int      @id @default(autoincrement())
  user    User @relation("UserGoals", fields: [userId], references: [id])
  userId   Int
  title     String
  imageUrl String?
  description String
  importance String
  vision String
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("goals")
}

model Task {
  id        Int      @id @default(autoincrement())
  user    User @relation("UserTasks", fields: [userId], references: [id])
  userId   Int
  title     String
  description String
  plannedDate DateTime
  completed Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

model PomodoroTimers {
  id        Int      @id @default(autoincrement())
  user    User @relation("UserPomodoroTimers", fields: [userId], references: [id])
  userId   Int
  startedAt DateTime @default(now())
  stoppedAt DateTime @default(now())

  @@map("pomodoro_timers")
}

model Track {
  id        Int      @id @default(autoincrement())
  title     String
  imageUrl String
  audioUrl String
  audioLength String?
  createdAt DateTime @default(now())

  @@map("tracks")
}

model Meditations {
  id        Int      @id @default(autoincrement())
  user    User @relation("UserMeditations", fields: [userId], references: [id])
  userId   Int
  startedAt DateTime @default(now())
  stoppedAt DateTime @default(now())
}

model Badge {
  id        Int      @id @default(autoincrement())
  title     String
  description String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user UserBadges[]

  @@map("badges")
}

model UserBadges {
  user    User @relation(fields: [userId], references: [id])
  userId   Int
  badge    Badge @relation(fields: [badgeId], references: [id])
  badgeId  Int
  assignedAt DateTime @default(now())


  @@map("user_badges")
  @@id([userId, badgeId])
}