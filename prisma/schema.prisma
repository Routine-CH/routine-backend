// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String       @id @unique @default(uuid())
  email                String       @unique
  username             String       @unique
  avatarUrl            String?
  password             String
  passwordResetToken   String?
  passwordResetExpires DateTime?
  passwordChangedAt    DateTime?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  badges               UserBadges[] @relation
  experience           Int          @default(0)

  // relations
  userLogins           UserStreaks[]         @relation("UserStreakCount")
  userJournals         Journal[]             @relation("UserJournals")
  userGoals            Goal[]                @relation("UserGoals")
  userTodo             Todo[]                @relation("UserTodos")
  userPomodoroTimers   PomodoroTimers[]      @relation("UserPomodoroTimers")
  userMeditations      Meditations[]         @relation("UserMeditations")
  notificationSettings NotificationSettings? @relation("NotificationSettings")
  userTools            UserTools[]           @relation("UserTools")
  Note                 Note[]                @relation("UserNotes")

  @@map("users")
}

model Tool {
  id         String      @id @unique @default(uuid())
  titleKey   String
  screenName String
  users      UserTools[]

  @@map("tools")
}

model UserTools {
  userId    String
  user      User    @relation("UserTools", fields: [userId], references: [id])
  toolId    String
  tool      Tool    @relation(fields: [toolId], references: [id])
  favourite Boolean @default(false)

  @@id([userId, toolId])
  @@index([userId])
  @@index([toolId])
  @@map("user_tools")
}

model NotificationSettings {
  // relation
  userId String @id @unique
  user   User   @relation("NotificationSettings", fields: [userId], references: [id])

  goalsEmailNotification    Boolean @default(false)
  goalsPushNotification     Boolean @default(false)
  todosEmailNotification    Boolean @default(false)
  todosPushNotification     Boolean @default(false)
  journalsEmailNotification Boolean @default(false)
  journalsPushNotification  Boolean @default(false)
  muteAllNotifications      Boolean @default(true)
  muteGamification          Boolean @default(false)

  @@map("notification_settings")
}

model UserStreaks {
  id            String    @id @unique @default(uuid())
  user          User      @relation("UserStreakCount", fields: [userId], references: [id])
  userId        String
  lastLoginDate DateTime  @default(now())
  streakCount   Int       @default(0)
  loginCount    Int       @default(0)
  lastBonusDate DateTime?

  @@index([userId])
  @@map("user_streaks")
}

model Journal {
  id               String        @id @unique @default(uuid())
  user             User          @relation("UserJournals", fields: [userId], references: [id])
  userId           String
  title            String
  journalMoods     JournalMood[] @relation
  moodDescription  String
  activity         String
  toImprove        String
  thoughtsAndIdeas String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([userId])
  @@map("journals")
}

model Mood {
  id           String        @id @unique @default(uuid())
  type         MoodType
  journalMoods JournalMood[]

  @@map("moods")
}

model JournalMood {
  mood      Mood    @relation(fields: [moodId], references: [id])
  moodId    String
  journal   Journal @relation(fields: [journalId], references: [id])
  journalId String

  @@id([moodId, journalId])
  @@index([moodId])
  @@index([journalId])
  @@map("journal_moods")
}

model Goal {
  id          String   @id @unique @default(uuid())
  user        User     @relation("UserGoals", fields: [userId], references: [id])
  userId      String
  title       String
  imageUrl    String?
  description String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  todos       Todo[]

  @@index([userId])
  @@map("goals")
}

model Todo {
  id          String   @id @unique @default(uuid())
  user        User     @relation("UserTodos", fields: [userId], references: [id])
  userId      String
  title       String
  description String
  plannedDate DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  goal        Goal?    @relation(fields: [goalId], references: [id])
  goalId      String?

  @@index([userId])
  @@index([goalId])
  @@map("todos")
}

model Note {
  id          String   @id @unique @default(uuid())
  user        User     @relation("UserNotes", fields: [userId], references: [id])
  userId      String
  title       String
  description String
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("notes")
}

model Image {
  id        String   @id @unique @default(uuid())
  note      Note?    @relation(fields: [noteId], references: [id])
  noteId    String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId])
  @@map("images")
}

model PomodoroTimers {
  id            String @id @unique @default(uuid())
  user          User   @relation("UserPomodoroTimers", fields: [userId], references: [id])
  userId        String
  totalDuration Int    @default(0)

  @@index([userId])
  @@map("pomodoro_timers")
}

model Track {
  id          String   @id @unique @default(uuid())
  title       String
  imageUrl    String
  audioUrl    String
  audioLength String?
  createdAt   DateTime @default(now())

  @@map("tracks")
}

model Meditations {
  id            String @id @unique @default(uuid())
  user          User   @relation("UserMeditations", fields: [userId], references: [id])
  userId        String
  totalDuration Int    @default(0)

  @@index([userId])
  @@map("meditations")
}

model Badge {
  id                      String       @id @unique @default(uuid())
  title                   String
  description             String       @db.VarChar(255)
  imageUrl                String?
  activityType            String
  requiredCountOrDuration Int
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  user                    UserBadges[]

  @@map("badges")
}

model UserBadges {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  badge      Badge    @relation(fields: [badgeId], references: [id])
  badgeId    String
  assignedAt DateTime @default(now())

  @@id([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@map("user_badges")
}

enum MoodType {
  fear
  anger
  sadness
  curiosity
  pride
  excitement
  frustration
  bored
  rage
  joy
  calm
}
